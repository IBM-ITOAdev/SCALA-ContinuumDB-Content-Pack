###############################################
# Test Logstash GenJdbc
###############################################

input {
        
	genjdbc {
            
            # Driver Parameters
                jdbcHost       => 'X.X.X.X'           # Host Name of Database Server
                jdbcPort       => '1433'              # Port Name of Database Server
                jdbcTargetDB   => 'mssql'	      # Target DB Type (Required)
                jdbcDBName     => 'ContinuumDB'       # Database Name Which to Use/Open
                jdbcUser       => '<username>'         # Database User Name
                jdbcPassword   => '<password>'         # Database User Password

            # Driver Path                
                jdbcDriverPath => '/path/to/sqljdbc4.jar'
                
            # Query to perform (note - this iteration of the plug-in inserts the where clause and SQL statement closure ";")
                jdbcSQLQuery       => "select * from AlarmEvent_View where TimeStamp < '2020-01-01 00:00:00.000' and TimeStamp > '%{CURRENTTIME}' order by Timestamp ASC"
                jdbcTimeField      => 'TimeStamp'   # The column in your result table that contains a timestamp (Important)
                jdbcPollInterval   => 60          # Retry Query Time in Seconds.

                jdbcPStoreFile => '/path/to/continuum.Alarm.pstore'
                
            # Datetime override (for collecting history) - An ISO SQL DateTime String
            # If not set it will start collecting from the localhost current time.
                jdbcCollectionStartTime => '2015-01-01 00:00:00.00'
                tags => [ "AlarmEvent_View" ]
        }

       	genjdbc {
            
           # Driver Parameters
               jdbcHost       => 'X.X.X.X'           # Host Name of Database Server
               jdbcPort       => '1433'              # Port Name of Database Server
               jdbcTargetDB   => 'mssql'	     # Target DB Type (Required)
               jdbcDBName     => 'ContinuumDB'       # Database Name Which to Use/Open
               jdbcUser       => '<username>'         # Database User Name
               jdbcPassword   => '<password>'         # Database User Password
               jdbcDriverPath => '/path/to/sqljdbc4.jar'
               jdbcSQLQuery       => "select * from ActivityEvent_View where TimeStamp < '2020-01-01 00:00:00.000' and TimeStamp > '%{CURRENTTIME}' order by Timestamp ASC"
               jdbcTimeField      => 'TimeStamp'   # The column in your result table that contains a timestamp (Important)
               jdbcPollInterval   => 60          # Retry Query Time in Seconds.

               jdbcPStoreFile => '/path/to/continuum.Activity.pstore'
                
            # Datetime override (for collecting history) - An ISO SQL DateTime String
            # If not set it will start collecting from the localhost current time.
               jdbcCollectionStartTime => '2015-01-01 00:00:00.00'
               tags => [ "ActivityEvent_View" ]
       }

	genjdbc {
           
           # Driver Parameters
              jdbcHost       => 'X.X.X.X'       # Host Name of Database Server
              jdbcPort       => '1433'              # Port Name of Database Server
              jdbcTargetDB   => 'mssql'	     # Target DB Type (Required)
              jdbcDBName     => 'ContinuumDB'       # Database Name Which to Use/Open
              jdbcUser       => '<username>'         # Database User Name
              jdbcPassword   => '<password>'         # Database User Password
              jdbcDriverPath => '/path/to/sqljdbc4.jar'
              jdbcSQLQuery       => "select * from ErrorEvent_View where TimeStamp < '2020-01-01 00:00:00.000' and TimeStamp > '%{CURRENTTIME}' order by TimeStamp ASC"
              jdbcTimeField      => 'TimeStamp'   # The column in your result table that contains a timestamp (Important)
              jdbcPollInterval   => 60          # Retry Query Time in Seconds.

              jdbcPStoreFile => '/path/to/continuum.Error.pstore'
               
#            Datetime override (for collecting history) - An ISO SQL DateTime String
#            If not set it will start collecting from the localhost current time.
              jdbcCollectionStartTime => '2015-01-01 00:00:00.00'
              tags => [ "ErrorEvent_View" ]
      }

} #end inputs


filter {

       if "AlarmEvent_View" in [tags] {
       	  mutate {
            replace => [ "host", "eolas", "path", "Continuum-AlarmEvent" ]
          }
      }

       if "ActivityEvent_View" in [tags] {
       	  mutate {
            replace => [ "host", "eolas", "path", "Continuum-ActivityEvent" ]
          }
      }

       if "ErrorEvent_View" in [tags] {
       	  mutate {
            replace => [ "host", "eolas", "path", "Continuum-ErrorEvent" ]
          }
      }


} # end filter

output {

       scala {
                scala_url => "https://<scalahostname>:9987/Unity/DataCollector"
                scala_user => "unityadmin"
                scala_password => "unityadmin"
                batch_size => 500000
                idle_flush_time => 5
                sequential_flush => false
                num_concurrent_writers => 5
                use_structured_api => false
                disk_cache_path => "/opt/logstash/cache/CONTINUUM"

                scala_fields => {
                   "eolas@Continuum-AlarmEvent" => "jdbchost,ObjectIdHi,ObjectIdLo,EventObjectName,EventNotification,MasterAlmName,MasterAlmOwnerIdHi,MasterAlmOwnerIdLo,MasterAlmDeviceIdHi,MasterAlmDeviceIdLo,PanelIdHi,PanelIdLo,ReportIdHi,ReportIdLo,InitDeviceIdHi,InitDeviceIdLo,TimeStamp,EventNotificationIdHi,EventNotificationIdLo,EventTypeNum,MessageText,FromStateNum,ToStateNum,EventObjectIdHi,EventObjectIdLo,ActiveAlarm,MasterAlmIdHi,MasterAlmIdLo,OperatorText,TimeOfAck,OperatorActions,EventObjectValue,SvEventObjectValue,TimeOfLog,SilencedTime,AudioFile,EventEnable,Priority,DeactivateCrit,AlarmActions,EEObjectIdHi,EEObjectIdLo,RTN,AckRequired,AckedByWorkstationIdHi,AckedByWorkstationIdLo,AckedByUserIdHi,AckedByUserIdLo,SilencedByUserIdHi,SilencedByUserIdLo,LoggingWorkstationIdHi,LoggingWorkstationIdLo,SilencedByWorkstationIdHi,SilencedByWorkstationIdLo,InitDeviceName,AckedByWorkstation,SilencedByWorkstation,AckedByUser,SilencedByUser,LoggingWorkstation,EEObjectName,EventObjectOwnerIdHi,EventObjectOwnerIdLo,EventObjectDeviceIdHi,EventObjectDeviceIdLo,InitDeviceOwnerIdHi,InitDeviceOwnerIdLo,InitDeviceDeviceIdHi,InitDeviceDeviceIdLo,AckedByWorkstationOwnerIdHi,AckedByWorkstationOwnerIdLo,AckedByWorkstationDeviceIdHi,AckedByWorkstationDeviceIdLo,SilencedByWorkstationOwnerIdHi,SilencedByWorkstationOwnerIdLo,SilencedByWorkstationDeviceIdHi,SilencedByWorkstationDeviceIdLo,LoggingWorkstationOwnerIdHi,LoggingWorkstationOwnerIdLo,LoggingWorkstationDeviceIdHi,LoggingWorkstationDeviceIdLo,AckedByUserOwnerIdHi,AckedByUserOwnerIdLo,AckedByUserDeviceIdHi,AckedByUserDeviceIdLo,SilencedByUserOwnerIdHi,SilencedByUserOwnerIdLo,SilencedByUserDeviceIdHi,SilencedByUserDeviceIdLo,EventNotificationOwnerIdHi,EventNotificationOwnerIdLo,EventNotificationDeviceIdHi,EventNotificationDeviceIdLo,EventType,ToState,FromState"
                 "eolas@Continuum-ActivityEvent" => "jdbchost,ObjectIdHi,ObjectIdLo,TimeStamp,EventObjectName,EventObjectIdHi,EventObjectIdLo,EventObjectOwnerIdHi,EventObjectOwnerIdLo,EventObjectDeviceIdHi,EventObjectDeviceIdLo,UserName,UserIdHi,UserIdLo,UserOwnerIdHi,UserOwnerIdLo,UserDeviceIdHi,UserDeviceIdLo,NodeName,NodeIdHi,NodeIdLo,NodeOwnerIdHi,NodeOwnerIdLo,NodeDeviceIdHi,NodeDeviceIdLo,Description,ActionCodeNum,ActionCode,CallerCodeNum,CallerCode,OperatorText,OTTimeStamp,OTUser,OTUserIdHi,OTUserIdLo,OTUserOwnerIdHi,OTUserOwnerIdLo,OTUserDeviceIdHi,OTUserDeviceIdLo"
                 "eolas@Continuum-ErrorEvent" => "jdbchost,ObjectIdHi,ObjectIdLo,TimeStamp,EventObjectName,EventObjectIdHi,EventObjectIdLo,EventObjectOwnerIdHi,EventObjectOwnerIdLo,EventObjectDeviceIdHi,EventObjectDeviceIdLo,UserName,UserIdHi,UserIdLo,UserOwnerIdHi,UserOwnerIdLo,UserDeviceIdHi,UserDeviceIdLo,WrkStatName,WrkStatIdHi,WrkStatIdLo,WrkStatOwnerIdHi,WrkStatOwnerIdLo,WrkStatDeviceIdHi,WrkStatDeviceIdLo,Description,ErrCodeNum,ErrorCode"

                } #end scala_fields                                                                                                                                                                  
                date_format_string => "yyyy-MM-dd'T'HH:mm:ss.SSSX"
        } #end scala output                                       

} # end output
